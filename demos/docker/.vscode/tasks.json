{
  // For more information, visit: https://go.microsoft.com/fwlink/?LinkId=733558
  "version": "2.0.0",
  "tasks": [
    {
      "label": "install packages",
      "detail": "Installs npm packages.",
      "type": "npm",
      "script": "install",
      "path": ".",
      "presentation": {
        "focus": true,
        "panel": "dedicated"
      },
      "problemMatcher": []
    },
    {
      "label": "run app",
      "detail": "Builds and runs the app.",
      "type": "npm",
      "script": "start",
      "path": ".",
      "isBackground": true,
      "presentation": {
        "focus": true,
        "panel": "dedicated"
      },
      "problemMatcher": {
        "owner": "typescript",
        "source": "ts",
        "applyTo": "closedDocuments",
        "fileLocation": ["relative", "${cwd}"],
        "pattern": "$tsc",
        "background": {
          "activeOnStart": true,
          "beginsPattern": {
            "regexp": "(.*?)"
          },
          "endsPattern": {
            "regexp": "Compiled |Failed to compile."
          }
        }
      }
    },
    {
      "label": "run tests",
      "detail": "Runs the tests.",
      "type": "process",
      "command": "pwsh",
      "args": [
        // Instead of using a task with 'type' set to 'shell' and the 'command' set to the powershell script I want to invoke,
        // here I'm using a task with 'type' set to 'process' to be able to invoke the PowerShell CLI directly, with the PowerShell
        // code passed in these "args".
        //
        // This is because I need to be able to pass double quotes and not have powershell remove them and I also don't want to have
        // to escape them. For example, if I used a task with type 'shell', when executing this task with a user input of:  --grep "load page"
        // for the ${input:testOptions}, then the double quotes would get stripped out when invoking the playwright-vscode-task.ps1 script
        // and what gets to the playwright-vscode-task.ps1 script is just: --grep load page
        // which then causes it to not work as expected.
        //
        // One alternative is to have the user escape the double quotes when providing the value for ${input:testOptions}. The user
        // would have to provide this value as:
        // --grep \"load page\" or --grep """load page""" (triple quotes because this value is then passed onto another pwsh
        // script which will also strip a set of double quotes).
        //
        // To avoid passing the responsability of escaping to the user I'm using a task with 'type' command.
        // For more information see: https://stackoverflow.com/questions/77540370/how-to-keep-double-quote-in-here-string-for-powershell-in-vscode-task
        //
        "-Command",
        "./npm-pwsh-scripts/playwright-vscode-task.ps1 -testOptions '${input:testOptions}' -webServerMode ${input:webServerMode} -webServerHost ${input:webServerHost} -webServerPort ${input:webServerPort}"
      ],
      "presentation": {
        "focus": true,
        "panel": "dedicated"
      },
      "group": {
        "kind": "test",
        "isDefault": true
      },
      "problemMatcher": []
    },
    {
      "label": "run tests ui",
      "detail": "Run Playwright tests in UI mode.",
      "type": "process",
      "command": "pwsh",
      "args": [
        // Instead of using a task with 'type' set to 'shell' and the 'command' set to the powershell script I want to invoke,
        // here I'm using a task with 'type' set to 'process' to be able to invoke the PowerShell CLI directly, with the PowerShell
        // code passed in these "args".
        //
        // This is because I need to be able to pass double quotes and not have powershell remove them and I also don't want to have
        // to escape them. For example, if I used a task with type 'shell', when executing this task with a user input of:  --grep "load page"
        // for the ${input:testOptions}, then the double quotes would get stripped out when invoking the playwright-vscode-task.ps1 script
        // and what gets to the playwright-vscode-task.ps1 script is just: --grep load page
        // which then causes it to not work as expected.
        //
        // One alternative is to have the user escape the double quotes when providing the value for ${input:testOptions}. The user
        // would have to provide this value as:
        // --grep \"load page\" or --grep """load page""" (triple quotes because this value is then passed onto another pwsh
        // script which will also strip a set of double quotes).
        //
        // To avoid passing the responsability of escaping to the user I'm using a task with 'type' command.
        // For more information see: https://stackoverflow.com/questions/77540370/how-to-keep-double-quote-in-here-string-for-powershell-in-vscode-task
        //
        "-Command",
        "./npm-pwsh-scripts/playwright-vscode-task.ps1 -ui -uiPort ${input:uiPort} -testOptions '${input:testOptions}' -webServerMode ${input:webServerMode} -webServerHost ${input:webServerHost} -webServerPort ${input:webServerPort} -fileChangesDetectionSupportMode ${input:fileChangesDetectionSupportMode}"
      ],
      "presentation": {
        "focus": true,
        "panel": "dedicated"
      },
      "problemMatcher": []
    },
    {
      "label": "show tests report",
      "detail": "Opens test results report.",
      "type": "npm",
      "script": "test:show-report",
      "path": ".",
      "presentation": {
        "focus": true,
        "panel": "dedicated"
      },
      "problemMatcher": []
    },
    {
      "label": "edge launch config pre launch task",
      "detail": "Builds and runs the app for debug via VSCode.",
      "type": "npm",
      "script": "start:vscode",
      "path": ".",
      "isBackground": true,
      "presentation": {
        "focus": true,
        "panel": "dedicated"
      },
      "problemMatcher": {
        "owner": "typescript",
        "source": "ts",
        "applyTo": "closedDocuments",
        "fileLocation": ["relative", "${cwd}"],
        "pattern": "$tsc",
        "background": {
          "activeOnStart": true,
          "beginsPattern": {
            "regexp": "(.*?)"
          },
          "endsPattern": {
            "regexp": "^Application bundle generation \\.*|http://127\\.0\\.0\\.1:\\d+/"
          }
        }
      }
    }
  ],
  "inputs": [
    {
      "id": "uiPort",
      "description": "What port do you want to use for UI mode?",
      "type": "promptString",
      "default": "43008"
    },
    {
      "id": "testOptions",
      "description": "Extra Playwright test CLI options",
      "type": "promptString",
      "default": ""
    },
    {
      "id": "webServerMode",
      "description": "Which Playwright Web Server to use?",
      "type": "pickString",
      "options": ["auto", "from-host", "from-docker"],
      "default": "auto"
    },
    {
      "id": "webServerHost",
      "description": "Host for the Playwright Web Server. Only required if 'webServerMode' was set to 'auto'.",
      "type": "promptString",
      "default": "127.0.0.1"
    },
    {
      "id": "webServerPort",
      "description": "Port for the Playwright Web Server. Only required if 'webServerMode' was set to 'auto'.",
      "type": "promptString",
      "default": "4200"
    },
    {
      "id": "fileChangesDetectionSupportMode",
      "description": "Whether the Docker container supports file changes detection automatically or not.",
      "type": "pickString",
      "options": ["auto", "supported", "unsupported"],
      "default": "auto"
    }
  ]
}
